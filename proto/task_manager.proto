syntax = "proto3";

package taskmanager.v1;

option go_package = "pkg/pb/taskmanager;taskmanagerpb";

// ===== Shared Messages =====
message SuccessResponse {
  string message = 1;
}

message ErrorResponse {
  string error = 1;
}

message Task {
  string id = 1;
  string title = 2;
  string description = 3;
  string status = 4;
  string project_id = 5;
  string assigned_to = 6;
  string created_at = 7;
  string updated_at = 8;
}

// ===== AuthService =====
message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginReply {
  string access_token = 1;
}

message RegisterRequest {
  string email = 1;
  string name = 2;
  string password = 3;
}

service AuthService {
  rpc Login(LoginRequest) returns (LoginReply);
  rpc Register(RegisterRequest) returns (SuccessResponse);
}

// ===== TaskService =====
message CreateTaskRequest {
  string title = 1;
  string description = 2;
  string status = 3;
  string project_id = 4;
}

message CreateTaskReply {
  Task task = 1;
}

message GetTaskRequest {
  string task_id = 1;
}

message GetTaskReply {
  Task task = 1;
}

message UpdateTaskRequest {
  string task_id = 1;
  string title = 2;
  string description = 3;
  string status = 4;
}

message UpdateTaskReply {
  Task task = 1;
}

message DeleteTaskRequest {
  string task_id = 1;
}

message AssignTaskRequest {
  string task_id = 1;
  string user_id = 2;
}

message CommentTaskRequest {
  string task_id = 1;
  string content = 2;
}

service TaskService {
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskReply);
  rpc GetTaskByID(GetTaskRequest) returns (GetTaskReply);
  rpc UpdateTaskByID(UpdateTaskRequest) returns (UpdateTaskReply);
  rpc DeleteTaskByID(DeleteTaskRequest) returns (SuccessResponse);
  rpc AssignTaskToUser(AssignTaskRequest) returns (SuccessResponse);
  rpc CommentOnTask(CommentTaskRequest) returns (SuccessResponse);
}

// ===== UserService =====
message GetUserTasksRequest {
  string user_id = 1;
}

message GetUserTasksReply {
  repeated Task tasks = 1;
}

service UserService {
  rpc GetTasks(GetUserTasksRequest) returns (GetUserTasksReply);
}

// ===== ProjectService =====
message GetProjectTasksRequest {
  string project_id = 1;
}

message GetProjectTasksReply {
  repeated Task tasks = 1;
}

service ProjectService {
  rpc GetTasks(GetProjectTasksRequest) returns (GetProjectTasksReply);
}
