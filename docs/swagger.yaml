basePath: /api/v1
definitions:
  dto.AssignRequest:
    description: Task assignment request DTO
    properties:
      user_id:
        example: f2bc33e0-103a-4d61-8a67-5ac5084e9fa1
        type: string
    required:
    - user_id
    type: object
  dto.CommentRequest:
    description: Comment creation request
    properties:
      content:
        example: Great job!
        type: string
    required:
    - content
    type: object
  dto.CreateTaskRequest:
    description: Task creation payload
    properties:
      description:
        example: Build a task manager demo with Go
        type: string
      project_id:
        example: a3d8d6f3-11de-43a0-8e62-330ac6118c15
        type: string
      status:
        example: open
        type: string
      title:
        example: Build demo
        type: string
    required:
    - project_id
    - status
    - title
    type: object
  dto.ErrorResponse:
    description: Generic error response
    properties:
      error:
        example: action error
        type: string
    type: object
  dto.LoginRequest:
    description: User login request
    properties:
      email:
        example: hucci@example.com
        type: string
      password:
        example: demo123
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    description: Login response containing JWT access token
    properties:
      access_token:
        example: eyJhbGciOi...
        type: string
    type: object
  dto.RegisterRequest:
    description: User registration request
    properties:
      email:
        example: hucci@example.com
        type: string
      name:
        example: Hucci
        type: string
      password:
        example: demo123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.SuccessResponse:
    description: Generic success response
    properties:
      message:
        example: action success
        type: string
    type: object
  dto.TaskResponse:
    properties:
      assigned_to:
        example: c55c8ee2-5552-4b6c-9f49-bb2e3f0d9d22
        type: string
      created_at:
        example: "2025-03-13T10:00:00Z"
        type: string
      description:
        example: Fix the bug on the payment screen that causes crashes
        type: string
      id:
        example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        type: string
      project_id:
        example: a3d8d6f3-11de-43a0-8e62-330ac6118c15
        type: string
      status:
        example: in_progress
        type: string
      title:
        example: Fix payment bug
        type: string
      updated_at:
        example: "2025-03-13T11:30:00Z"
        type: string
    type: object
  dto.UpdateTaskRequest:
    description: Task update payload
    properties:
      description:
        example: New desc
        type: string
      status:
        example: done
        type: string
      title:
        example: Update title
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing tasks, users, projects, comments
  title: Task Manager API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Log in and get JWT token
      tags:
      - Auth
  /projects/{project_id}/tasks:
    get:
      description: Get all tasks belonging to a specific project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.TaskResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List tasks by project
      tags:
      - Projects
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User registration info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /tasks:
    post:
      consumes:
      - application/json
      parameters:
      - description: Task data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - Tasks
  /tasks/{id}:
    delete:
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a task by ID
      tags:
      - Tasks
    get:
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a task by ID
      tags:
      - Tasks
    put:
      consumes:
      - application/json
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated task data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a task by ID
      tags:
      - Tasks
  /tasks/{id}/assign:
    put:
      consumes:
      - application/json
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: User to assign
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign task to user
      tags:
      - Tasks
  /tasks/{id}/comment:
    put:
      consumes:
      - application/json
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Comment content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Comment on a task
      tags:
      - Tasks
  /users/{user_id}/tasks:
    get:
      description: Get all tasks assigned to a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.TaskResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List tasks by user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
